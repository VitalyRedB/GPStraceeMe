package com.githubvitalyredb.gpstraceeme

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.Service
import android.content.Context
import android.content.Intent
import android.location.Location
import android.media.MediaPlayer
import android.os.*
import android.util.Log
import androidx.core.app.NotificationCompat
import androidx.localbroadcastmanager.content.LocalBroadcastManager
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import java.util.*
import java.util.concurrent.TimeUnit

class TrackerService : Service() , LocationHelper.OnLocationReceivedCallback {

    private val TAG = "TrackerService"

    private lateinit var locationHelper: LocationHelper
    private lateinit var gpsTrackerManager: GpsTrackerManager
    private val handler = Handler(Looper.getMainLooper())

    // üîß –†–∞–±–æ—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º—ã–µ –∏–∑ SharedPreferences
    private var periodicInterval: Long = TimeUnit.MINUTES.toMillis(10)
    private val MAX_SLEEP_INTERVAL = TimeUnit.HOURS.toMillis(1)
    private var startHour = 8
    private var endHour = 20
    private var TOKEN = "SECRET123"
    private var USER_ID = "KOD_ID_123"
    private var backgroundMessagesEnabled = true
    private var daysMap: MutableMap<String, Int> = mutableMapOf()

    override fun onCreate() {
        // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –õ–û–ì: –¢–µ–ø–µ—Ä—å —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ —Ç–µ–ª–µ –º–µ—Ç–æ–¥–∞!
        super.onCreate()
        Log.d(TAG, "Service onCreate –∑–∞–ø—É—â–µ–Ω. –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ—á–∫–∞!")

        try {
            // üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LocationHelper
            locationHelper = LocationHelper(this, null)

            // –ß–∏—Ç–∞–µ–º SharedPreferences –¥–ª—è daysMap –∏ fallback-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            loadSettings()

            // üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GpsTrackerManager
            gpsTrackerManager = GpsTrackerManager(TOKEN, USER_ID) { json ->
                val intent = Intent(ACTION_UPDATE_MESSAGE).apply {
                    putExtra(EXTRA_JSON_MESSAGE, json)
                }
                LocalBroadcastManager.getInstance(this).sendBroadcast(intent)
            }

            // üîπ –ó–∞–ø—É—Å–∫ Foreground-—Å–µ—Ä–≤–∏—Å–∞
            // NOTE: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∑–¥–µ—Å—å, –Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ onStartCommand
            startForeground(NOTIFICATION_ID, createNotification())
            Log.d(TAG, "Service –∑–∞–ø—É—â–µ–Ω –≤ Foreground mode.")

            // üîπ –°—Ç–∞—Ä—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            handler.post(periodicTask)
        } catch (e: Exception) {
            // üö® –õ–û–ì: –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —ç—Ç–æ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ
            Log.e(TAG, "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ onCreate —Å–µ—Ä–≤–∏—Å–∞, –ø—Ä–∏—á–∏–Ω–∞ –∫—Ä–∞—à–∞: ${e.message}", e)
            throw e
        }
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        Log.d(TAG, "onStartCommand: Intent –ø–æ–ª—É—á–µ–Ω. startId=$startId")

        // üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ MainActivity, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ SharedPreferences
        intent?.let {
            startHour = it.getIntExtra(EXTRA_START_HOUR, startHour)
            endHour = it.getIntExtra(EXTRA_END_HOUR, endHour)
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –¥–ª—è periodicInterval
            val intervalMinutes = it.getIntExtra(EXTRA_INTERVAL, (periodicInterval / TimeUnit.MINUTES.toMillis(1)).toInt())
            periodicInterval = TimeUnit.MINUTES.toMillis(intervalMinutes.toLong())
            TOKEN = it.getStringExtra(EXTRA_TOKEN) ?: TOKEN
            USER_ID = it.getStringExtra(EXTRA_USER_ID) ?: USER_ID
            backgroundMessagesEnabled = it.getBooleanExtra(EXTRA_BACKGROUND_MESSAGES, backgroundMessagesEnabled)

            // üîπ –õ–æ–≥ –æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö. –°–∫—Ä—ã–≤–∞–µ–º —á–∞—Å—Ç—å —Ç–æ–∫–µ–Ω–∞.
            Log.d(TAG, "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ Intent: Start=$startHour, End=$endHour, Interval=$intervalMinutes min, Token=${TOKEN.take(4)}..., UserID=$USER_ID")
        }

        // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ê–®–ê –ó–î–ï–°–¨ ---
        // üîπ –û–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è backgroundMessagesEnabled)
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–∞—Å—Ç 'as?' —Å null-safe –≤—ã–∑–æ–≤–æ–º.
        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as? NotificationManager

        if (notificationManager == null) {
            Log.e(TAG, "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å NotificationManager –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        } else {
            notificationManager.notify(NOTIFICATION_ID, createNotification())
            Log.d(TAG, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ onStartCommand.")
        }
        // -----------------------------

        return START_STICKY
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ SharedPreferences
     */
    private fun loadSettings() {
        val prefs = getSharedPreferences("AppSettings", Context.MODE_PRIVATE)

        startHour = prefs.getInt("startHour", 8)
        endHour = prefs.getInt("endHour", 20)
        periodicInterval = prefs.getLong("interval", TimeUnit.MINUTES.toMillis(10))
        backgroundMessagesEnabled = prefs.getBoolean("background_messages_enabled", true)
        TOKEN = prefs.getString("TOKEN", TOKEN) ?: TOKEN
        USER_ID = prefs.getString("USER_ID", USER_ID) ?: USER_ID

        val json = prefs.getString("daysMap", null)
        daysMap = if (json != null) {
            val type = object : TypeToken<MutableMap<String, Int>>() {}.type
            Gson().fromJson(json, type)
        } else {
            mutableMapOf("Mon" to 1, "Tue" to 1, "Wed" to 1, "Thu" to 1, "Fri" to 1, "Sat" to 0, "Sun" to 0)
        }

        Log.d(TAG, "SharedPreferences: –ó–∞–≥—Ä—É–∂–µ–Ω—ã –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (DaysMap).")
    }

    /**
     * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞
     */
    private val periodicTask = object : Runnable {
        override fun run() {
            try {
                loadSettings() // –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∂–¥—ã–π —Ü–∏–∫–ª

                val now = Calendar.getInstance()
                val hour = now.get(Calendar.HOUR_OF_DAY)
                val dayName = when (now.get(Calendar.DAY_OF_WEEK)) {
                    Calendar.MONDAY -> "Mon"
                    Calendar.TUESDAY -> "Tue"
                    Calendar.WEDNESDAY -> "Wed"
                    Calendar.THURSDAY -> "Thu"
                    Calendar.FRIDAY -> "Fri"
                    Calendar.SATURDAY -> "Sat"
                    Calendar.SUNDAY -> "Sun"
                    else -> "Unknown"
                }

                val isDayActive = daysMap[dayName] == 1
                val isTimeActive = hour in startHour until endHour

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                val nextDelay = periodicInterval.coerceAtMost(MAX_SLEEP_INTERVAL)
                val intervalMinutes = nextDelay / 60000

                if (isDayActive && isTimeActive) {
                    Log.i(TAG, "–ê–∫—Ç–∏–≤–Ω–æ: $dayName, $hour:00. –ò–Ω—Ç–µ—Ä–≤–∞–ª $intervalMinutes –º–∏–Ω. –ó–∞–ø—Ä–æ—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.")
                    // üîπ –ó–∞–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å –∫–æ–ª–±—ç–∫–æ–º
                    locationHelper.startLocationUpdates(this@TrackerService)
                } else {
                    Log.d(TAG, "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ: $dayName, $hour:00. –ü—Ä–æ–ø—É—Å–∫ —Ü–∏–∫–ª–∞. –°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª —á–µ—Ä–µ–∑ $intervalMinutes –º–∏–Ω.")
                }

            } catch (e: Exception) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –≤ periodicTask: ${e.message}", e)
            } finally {
                // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è MAX_SLEEP_INTERVAL
                handler.postDelayed(this, periodicInterval.coerceAtMost(MAX_SLEEP_INTERVAL))
            }
        }
    }

    /**
     * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è OnLocationReceivedCallback
     */
    override fun onLocationReceived(location: Location) {
        locationHelper.stopLocationUpdates()
        // üîπ –õ–û–ì: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        Log.i(TAG, "–ö–û–û–†–î–ò–ù–ê–¢–´ –ü–û–õ–£–ß–ï–ù–´: Lat=${location.latitude}, Lon=${location.longitude}. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")

        // üîπ –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        val mediaPlayer = MediaPlayer.create(this, R.raw.data_sound)
        mediaPlayer.setOnCompletionListener { it.release() }
        mediaPlayer.start()

        // üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ MainActivity
        gpsTrackerManager.sendGpsPoint(this, location.latitude, location.longitude)
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Foreground-—Å–µ—Ä–≤–∏—Å–∞ (—Ç–∏—Ö–æ–µ)
     */
    private fun createNotification(): Notification {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val importance = NotificationManager.IMPORTANCE_MIN
            val channel = NotificationChannel(
                NOTIFICATION_CHANNEL_ID,
                "GPStraceeMe Tracking",
                importance
            ).apply {
                description = "–§–æ–Ω–æ–≤–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"
                setSound(null, null)
                enableVibration(false)
                setShowBadge(false)
                lockscreenVisibility = Notification.VISIBILITY_SECRET
            }
            val manager = getSystemService(NotificationManager::class.java)
            manager?.createNotificationChannel(channel)
        }

        return NotificationCompat.Builder(this, NOTIFICATION_CHANNEL_ID)
            .setSmallIcon(android.R.drawable.ic_menu_compass)
            .setOngoing(true)
            .setSilent(true)
            .setPriority(NotificationCompat.PRIORITY_MIN)
            .setContentTitle("GPStraceeMe")
            .setContentText(
                if (backgroundMessagesEnabled)
                    "Tracking: $startHour:00-$endHour:00 every ${periodicInterval / 60000} min"
                else
                    "Tracking active (hidden mode)"
            )
            .build()
    }

    override fun onDestroy() {
        handler.removeCallbacks(periodicTask)
        locationHelper.stopLocationUpdates()
        Log.d(TAG, "Service onDestroy: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ.")
        super.onDestroy()
    }

    override fun onBind(intent: Intent?): IBinder? = null

    companion object {
        const val NOTIFICATION_CHANNEL_ID = "gps_tracker_channel"
        const val NOTIFICATION_ID = 101

        const val ACTION_UPDATE_MESSAGE = "com.githubvitalyredb.gpstraceeme.ACTION_UPDATE_MESSAGE"
        const val EXTRA_JSON_MESSAGE = "EXTRA_JSON_MESSAGE"

        const val EXTRA_START_HOUR = "EXTRA_START_HOUR"
        const val EXTRA_END_HOUR = "EXTRA_END_HOUR"
        const val EXTRA_INTERVAL = "EXTRA_INTERVAL"
        const val EXTRA_TOKEN = "EXTRA_TOKEN"
        const val EXTRA_USER_ID = "EXTRA_USER_ID"
        const val EXTRA_BACKGROUND_MESSAGES = "EXTRA_BACKGROUND_MESSAGES"
    }
}



